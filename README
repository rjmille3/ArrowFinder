Setup python environment:

conda create -n two_stage python=3.7.0

conda install openeye::openeye-toolkits

pip install requirements.txt -r

# Update PYTHONPATH to use relevant libraries

Add the Working Directory and CombiCDB folders to PYTHONPATH, can run this command from the base working directory:

export PYTHONPATH="$PWD:$PWD/rpCHEM/CombiCDB"

The code in this repository depends on OpenEye Tookits, which is a proprietary software. To use openeye toolkits, you must obtain a valid license from OpenEye. Add the path to the license file like so.

# Export OE_LICENSE
export OE_LICENSE="path/to/oe_license.txt"

The Openeye Adacemic License Agreement is available for reference at "openeye_license_agreement.txt". Although we make the source code freely available under the MIT license, any user running OpenEye libraries will need to comply with the terms of the OpenEye licensing agreement.

For atom model:

1. Create graph topological features using "shell_scripts/datagen/create_path_features.sh".

Before running the command, ensure reactions are formatted with quotation marks

"[Li:10][O+:11](C)C1=CC=CC=C1>>[Li+:10].C[O:11]C1=CC=CC=C1 10,11=11"

2. Use "shell_scripts/datagen/create_sink.sh" and "shell_scripts/datagen/create_source.sh" to create training files for atom ranking models.

3. Use "shell_scripts/training/train_sink.sh" and "shell_scripts/training/train_soruce.sh" to train atom models for predicting sinks and sources.


For ranker model:

1. Use "shell_scripts/datagen/create_ranker.sh" to create training files for mechanism ranking model.

Ensure the input data is of the form "rxn, arrow, source, sink". Use "shell_scripts/datagen/reformat_rxns.sh" to reformat reactions into this format.

2. Use "shell_scripts/training/train_ranker.sh" to train ranker model

For evaluation:

1. Use "shell_scripts/eval/run_two_stage_prediction" to generate predictions from the model. It will produce 3 files,

bad.csv -> all lines which were unable to be processed
preds_ascending.csv -> all predictions sorted by ascending score 
preds_descending.csv -> all predictions sorted by descending score

The model is learning to increase the difference in scores between plausible and implausible mechanisms, but the orientation of scores is not guaranteed, that is why both orderings are output.

2. Use "shell_scripts/eval/compute_accuracy.sh" to compute the accuracy from the prediction files.

Be sure to test both ascending and descending predictions to find the correct ranker orientation.

To run "ArrowFinder":

1. Use "shellscripts/eval/run_arrowfinder_prediction".